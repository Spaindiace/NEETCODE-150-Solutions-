class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();

        for (int i = 0; i < n; i++) {
            unordered_map<char, int> ump;
            for (int j = 0; j < m; j++) {
                if (board[i][j] != '.') {
                    ump[board[i][j]]++;
                    if (ump[board[i][j]] > 1) {
                        return false;
                    }
                }
            }
        }
        for (int j = 0; j < m; j++) {
            unordered_map<char, int> ump;
            for (int i = 0; i < n; i++) {
                if (board[i][j] != '.') {
                    ump[board[i][j]]++;
                    if (ump[board[i][j]] > 1) {
                        return false;
                    }
                }
            }
        }
            


vector<vector<char>> v(9);

v[0].push_back(board[0][0]);
v[0].push_back(board[0][1]);
v[0].push_back(board[0][2]);
v[0].push_back(board[1][0]);
v[0].push_back(board[1][1]);
v[0].push_back(board[1][2]);
v[0].push_back(board[2][0]);
v[0].push_back(board[2][1]);
v[0].push_back(board[2][2]);

v[1].push_back(board[0][3]);
v[1].push_back(board[0][4]);
v[1].push_back(board[0][5]);
v[1].push_back(board[1][3]);
v[1].push_back(board[1][4]);
v[1].push_back(board[1][5]);
v[1].push_back(board[2][3]);
v[1].push_back(board[2][4]);
v[1].push_back(board[2][5]);

v[2].push_back(board[0][6]);
v[2].push_back(board[0][7]);
v[2].push_back(board[0][8]);
v[2].push_back(board[1][6]);
v[2].push_back(board[1][7]);
v[2].push_back(board[1][8]);
v[2].push_back(board[2][6]);
v[2].push_back(board[2][7]);
v[2].push_back(board[2][8]);

v[3].push_back(board[3][0]);
v[3].push_back(board[3][1]);
v[3].push_back(board[3][2]);
v[3].push_back(board[4][0]);
v[3].push_back(board[4][1]);
v[3].push_back(board[4][2]);
v[3].push_back(board[5][0]);
v[3].push_back(board[5][1]);
v[3].push_back(board[5][2]);

v[4].push_back(board[3][3]);
v[4].push_back(board[3][4]);
v[4].push_back(board[3][5]);
v[4].push_back(board[4][3]);
v[4].push_back(board[4][4]);
v[4].push_back(board[4][5]);
v[4].push_back(board[5][3]);
v[4].push_back(board[5][4]);
v[4].push_back(board[5][5]);

v[5].push_back(board[3][6]);
v[5].push_back(board[3][7]);
v[5].push_back(board[3][8]);
v[5].push_back(board[4][6]);
v[5].push_back(board[4][7]);
v[5].push_back(board[4][8]);
v[5].push_back(board[5][6]);
v[5].push_back(board[5][7]);
v[5].push_back(board[5][8]);

v[6].push_back(board[6][0]);
v[6].push_back(board[6][1]);
v[6].push_back(board[6][2]);
v[6].push_back(board[7][0]);
v[6].push_back(board[7][1]);
v[6].push_back(board[7][2]);
v[6].push_back(board[8][0]);
v[6].push_back(board[8][1]);
v[6].push_back(board[8][2]);

v[7].push_back(board[6][3]);
v[7].push_back(board[6][4]);
v[7].push_back(board[6][5]);
v[7].push_back(board[7][3]);
v[7].push_back(board[7][4]);
v[7].push_back(board[7][5]);
v[7].push_back(board[8][3]);
v[7].push_back(board[8][4]);
v[7].push_back(board[8][5]);

v[8].push_back(board[6][6]);
v[8].push_back(board[6][7]);
v[8].push_back(board[6][8]);
v[8].push_back(board[7][6]);
v[8].push_back(board[7][7]);
v[8].push_back(board[7][8]);
v[8].push_back(board[8][6]);
v[8].push_back(board[8][7]);
v[8].push_back(board[8][8]);

      for(int i=0; i<v.size(); i++){
        unordered_map<char,int>ump;
        for(int j=0; j<v[i].size(); j++){
            if(v[i][j]!='.'){
            ump[v[i][j]]++;
            if(ump[v[i][j]]>1){
                return false;
            }
        }
      }
      }
       

        return true;
    }
};
